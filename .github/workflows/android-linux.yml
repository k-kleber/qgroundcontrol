name: Android-Linux

on:
  push:
    branches:
      - "android/*"
    paths-ignore:
      - "deploy/**"
      - "docs/**"
      - ".github/workflows/archive/**"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        BuildType: [Release]

    defaults:
      run:
        shell: bash

    env:
      ARTIFACT: SuindGroundControl.apk
      QT_VERSION: 6.6.3
      GST_VERSION: 1.22.12
      QT_ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/deploy/android/android_suind_release.keystore
      QT_ANDROID_KEYSTORE_ALIAS: ${{ secrets.QT_ANDROID_KEYSTORE_ALIAS }}
      QT_ANDROID_KEYSTORE_STORE_PASS: ${{ secrets.QT_ANDROID_KEYSTORE_STORE_PASS }}
      QT_ANDROID_KEYSTORE_KEY_PASS: ${{ secrets.QT_ANDROID_KEYSTORE_STORE_PASS }}
      QT_ANDROID_ABIS: "arm64-v8a"
      VERSION_NUMBER: v0.0.0

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          android: 'false'
        continue-on-error: true

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0

      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install CCache
        run: |
          wget --quiet https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2-linux-x86_64.tar.xz
          tar -xvf ccache-*-linux-x86_64.tar.xz
          cd ccache-*-linux-x86_64
          sudo make install

      - name: Install Qt for Android
        uses: ./.github/actions/qt-android
        with:
          host: linux
          arch: gcc_64
          version: ${{ env.QT_VERSION }}
          abis: ${{ env.QT_ANDROID_ABIS }}

      - run: mkdir ${{ runner.temp }}/shadow_build_dir

      - name: Configure
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_ANDROID_ABIS="${{ env.QT_ANDROID_ABIS }}"
              -DQT_ANDROID_BUILD_ALL_ABIS=OFF
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../gcc_64"
              -DQT_ANDROID_SIGN_APK=ON
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=ON

      - name: Build
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Check if APK exists
        id: check_apk
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: |
          if ls ./android-build/*.apk 1> /dev/null 2>&1; then
            echo "APK exists."
          else
            echo "APK does not exist."
            exit 1
          fi

      - name: Create new git tag
        id: create_tag
        if: steps.create_tag.outputs.exit_code == 0 &&  (github.ref == 'refs/heads/android/production' || github.ref == 'refs/heads/android/development')
        run: |
          # Create a new tag with the incremented version
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.actor }}"
          git tag ${{ env.VERSION_NUMBER }}
          git push origin ${{ env.VERSION_NUMBER }}

      - name: Create Release
        id: create_release
        if: steps.create_tag.outputs.exit_code == 0 && github.ref == 'refs/heads/android/production'
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_NUMBER }}
          release_name: Release  ${{ github.ref }}:${{ env.VERSION_NUMBER }}
          body: |
            Release created for branch ${{ github.ref }} commit ${{ github.sha }} and version ${{ env.VERSION_NUMBER }}.
          draft: false
          prerelease: false

      - name: Prepend commit ID to artifact name
        id: prepend_commit
        run: |
          COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)
          echo "ARTIFACT=QGroundControl-${COMMIT_ID}-${{ env.VERSION_NUMBER }}.apk" >> $GITHUB_ENV

      - name: Prepare APK
        working-directory: ${{ runner.temp }}/shadow_build_dir
        run: mv ./android-build/*.apk ./${{ env.ARTIFACT }}

      - name: Upload Build File
        if: steps.check_apk.outputs.exit_code == 0
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ env.ARTIFACT}}
          azure_storage_account_name: ${{ vars.BLOB_ACCOUNT_NAME }}
          azure_storage_account_key: ${{ secrets.BLOB_KEY }}
          container_name: ${{ vars.BLOB_CONTAINER }}
          upload_to_azure: ${{ github.ref == 'refs/heads/android/production' || github.ref == 'refs/heads/android/development' }}
